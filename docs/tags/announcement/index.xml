<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Announcement on LFortran</title>
    <link>https://lfortran.org/tags/announcement/</link>
    <description>Recent content in Announcement on LFortran</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 04 Jun 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://lfortran.org/tags/announcement/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>LFortran: the Fastest Open-Source Compiler in Compile-Time Evaluation of an Array Benchmark</title>
      <link>https://lfortran.org/blog/2024/06/lfortran-the-fastest-open-source-compiler-in-compile-time-evaluation-of-an-array-benchmark/</link>
      <pubDate>Tue, 04 Jun 2024 00:00:00 +0000</pubDate>
      
      <guid>https://lfortran.org/blog/2024/06/lfortran-the-fastest-open-source-compiler-in-compile-time-evaluation-of-an-array-benchmark/</guid>
      <description>After successful compilation of stdlib and Fortran On Web Using LFortran, we focused on improving the support for compile time computation and we are excited to announce that LFortran can now compile the example from the Computing at compile time Fortran Discourse topic.
This example can be used to benchmark the speed of compilation and compile-time array evaluation by increasing the size of the arrays. On this particular example LFortran outperforms other open-source Fortran compilers by an order of magnitude for large array sizes.</description>
    </item>
    
    <item>
      <title>Fortran On Web Using LFortran</title>
      <link>https://lfortran.org/blog/2024/05/fortran-on-web-using-lfortran/</link>
      <pubDate>Thu, 02 May 2024 00:00:00 +0000</pubDate>
      
      <guid>https://lfortran.org/blog/2024/05/fortran-on-web-using-lfortran/</guid>
      <description>Fortran On Web Using LFortran Recently, there was a blog post titled Fortran on WebAssembly released by Dr George W Stagg. This article inspired us to compile the same example using our LFortran compiler. We are happy to share that we have the fortran mnist classifier example used in the blog post, compiled to WebAssembly using LFortran (with no hacks to the compiler) and working perfectly in the browser.
MNIST  We cloned the original authors code and just swapped-in two of our generated files mnist.</description>
    </item>
    
    <item>
      <title>LFortran compiles Fortran stdlib</title>
      <link>https://lfortran.org/blog/2024/04/lfortran-compiles-fortran-stdlib/</link>
      <pubDate>Tue, 16 Apr 2024 00:00:00 +0000</pubDate>
      
      <guid>https://lfortran.org/blog/2024/04/lfortran-compiles-fortran-stdlib/</guid>
      <description>LFortran compiles 85% Fortran stdlib We are happy to announce that LFortran can compile all numerical modules in stdlib. The stdlib library has 32 modules, here are the details of the current status:
 all 32 modules compile to ASR 27 modules (85%) compile to LLVM; there are 4 hash modules (hash_32bit, hash_64bit, hashmaps, hashmap_wrappers, stringlist_type) and one stringlist_type module that does not compile to LLVM yet 24 modules pass all their tests; 3 modules (sorting, bitsets, stats) do not pass all tests yet, but simple examples that use the modules work  This is sixth third-party production-grade code that LFortran can compile after SciPy.</description>
    </item>
    
    <item>
      <title>LFortran Compiles 60% of Scipy</title>
      <link>https://lfortran.org/blog/2024/01/lfortran-compiles-60-of-scipy/</link>
      <pubDate>Wed, 10 Jan 2024 00:00:00 +0000</pubDate>
      
      <guid>https://lfortran.org/blog/2024/01/lfortran-compiles-60-of-scipy/</guid>
      <description>LFortran Compiles 60% of SciPy With successful compilation of dftatom in October 2023, embarking to the new year with a remarkable stride, we are delighted to announce that LFortran can now successfully compile 9 out of the 15 Fortran packages within the SciPy library without requiring any modifications.
This is the fifth third-party production-grade code that LFortran can compile. The progress bar towards beta has thus reached 5/10.
LFortran can now compile and pass tests written for scipy.</description>
    </item>
    
    <item>
      <title>LFortran Compiles dftatom</title>
      <link>https://lfortran.org/blog/2023/10/lfortran-compiles-dftatom/</link>
      <pubDate>Tue, 31 Oct 2023 00:00:00 +0000</pubDate>
      
      <guid>https://lfortran.org/blog/2023/10/lfortran-compiles-dftatom/</guid>
      <description>After compiling fastGPT in September 2023, today we are happy to announce that LFortran can compile and run dftatom without any modifications, and dftatom&amp;rsquo;s continuous integration (CI) now tests every commit with LFortran, along side GFortran.
This is the fourth full third-party production-grade code that LFortran can compile. The progress bar towards beta has thus reached 4/10.
It can compile the main application in Debug mode twice faster than GFortran. In Release mode the runtime performance is within a factor of 2x slower than GFortran&amp;rsquo;s Release mode (all optimizations on).</description>
    </item>
    
    <item>
      <title>LFortran Compiles fastGPT</title>
      <link>https://lfortran.org/blog/2023/09/lfortran-compiles-fastgpt/</link>
      <pubDate>Wed, 06 Sep 2023 00:00:00 +0000</pubDate>
      
      <guid>https://lfortran.org/blog/2023/09/lfortran-compiles-fastgpt/</guid>
      <description>In our last blog post from May 2023, we announced that LFortran can compile legacy and modern Minpack. Today, we are happy to announce that LFortran can compile and run fastGPT.
This is the third code that LFortran can compile. The progress bar toward beta has progressed to 3/10.
LFortran is still alpha, meaning that users expect frequent bugs and breaking changes. Alpha users are enthusiastic partners in the effort to reach beta and they dilligently report issues.</description>
    </item>
    
    <item>
      <title>LFortran Breakthrough: Now Building Legacy and Modern Minpack</title>
      <link>https://lfortran.org/blog/2023/05/lfortran-breakthrough-now-building-legacy-and-modern-minpack/</link>
      <pubDate>Tue, 02 May 2023 00:00:00 +0000</pubDate>
      
      <guid>https://lfortran.org/blog/2023/05/lfortran-breakthrough-now-building-legacy-and-modern-minpack/</guid>
      <description>Two days ago on April 30, 2023 was the 4th anniversary of LFortran&amp;rsquo;s initial release. Our initial prototype in 2019 was in Python. Since then we have rewritten to C++ for speed and robustness. In 2021 we announced an MVP.
In this update, we are happy to announce that LFortran can compile and run both legacy and modern Minpack. We&amp;rsquo;ll start off by taking a look at the current compilation status and benchmarks of minpack.</description>
    </item>
    
    <item>
      <title>Why We Created LFortran</title>
      <link>https://lfortran.org/blog/2019/04/why-we-created-lfortran/</link>
      <pubDate>Tue, 30 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://lfortran.org/blog/2019/04/why-we-created-lfortran/</guid>
      <description>We recently open sourced LFortran, an interactive Fortran compiler built on top of LLVM that we have been developing for the last 1.5 years. It is a work in progress and at the link you can find what works already, what is planned and a roadmap.
Here is our motivation.
Why are almost no new scientific or engineering software projects started in Fortran? Usually (in our neck of the woods) C++ is chosen instead.</description>
    </item>
    
  </channel>
</rss>
