<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>fortran-lang on LFortran</title>
    <link>https://lfortran.org/tags/fortran-lang/</link>
    <description>Recent content in fortran-lang on LFortran</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 27 Aug 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://lfortran.org/tags/fortran-lang/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>LFortran now compiles lanl/SNAP</title>
      <link>https://lfortran.org/blog/2024/08/lfortran-now-compiles-lanl/snap/</link>
      <pubDate>Tue, 27 Aug 2024 00:00:00 +0000</pubDate>
      
      <guid>https://lfortran.org/blog/2024/08/lfortran-now-compiles-lanl/snap/</guid>
      <description>We are thrilled to announce that LFortran can now successfully compile and run lanl/SNAP, marking a significant milestone in our journey to beta. SNAP is the seventh production-grade, third-party code that LFortran can compile, bringing us closer to our goal of compiling 10 such codesâ€”a critical step toward a beta-quality compiler.
 About SNAP SNAP (SN Discrete Ordinates Application Proxy) is a proxy application designed to emulate the performance of modern discrete ordinates neutral particle transport codes.</description>
    </item>
    
    <item>
      <title>Fortran On Web Using LFortran</title>
      <link>https://lfortran.org/blog/2024/05/fortran-on-web-using-lfortran/</link>
      <pubDate>Thu, 02 May 2024 00:00:00 +0000</pubDate>
      
      <guid>https://lfortran.org/blog/2024/05/fortran-on-web-using-lfortran/</guid>
      <description>Fortran On Web Using LFortran Recently, there was a blog post titled Fortran on WebAssembly released by Dr George W Stagg. This article inspired us to compile the same example using our LFortran compiler. We are happy to share that we have the fortran mnist classifier example used in the blog post, compiled to WebAssembly using LFortran (with no hacks to the compiler) and working perfectly in the browser.
MNIST  We cloned the original authors code and just swapped-in two of our generated files mnist.</description>
    </item>
    
    <item>
      <title>LFortran compiles Fortran stdlib</title>
      <link>https://lfortran.org/blog/2024/04/lfortran-compiles-fortran-stdlib/</link>
      <pubDate>Tue, 16 Apr 2024 00:00:00 +0000</pubDate>
      
      <guid>https://lfortran.org/blog/2024/04/lfortran-compiles-fortran-stdlib/</guid>
      <description>LFortran compiles 85% Fortran stdlib We are happy to announce that LFortran can compile all numerical modules in stdlib. The stdlib library has 32 modules, here are the details of the current status:
 all 32 modules compile to ASR 27 modules (85%) compile to LLVM; there are 4 hash modules (hash_32bit, hash_64bit, hashmaps, hashmap_wrappers, stringlist_type) and one stringlist_type module that does not compile to LLVM yet 24 modules pass all their tests; 3 modules (sorting, bitsets, stats) do not pass all tests yet, but simple examples that use the modules work  This is sixth third-party production-grade code that LFortran can compile after SciPy.</description>
    </item>
    
  </channel>
</rss>
