<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Fortran-Lang on LFortran</title>
    <link>https://lfortran.org/tags/fortran-lang/</link>
    <description>Recent content in Fortran-Lang on LFortran</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 14 Nov 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://lfortran.org/tags/fortran-lang/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>LFortran supports all intrinsic functions</title>
      <link>https://lfortran.org/blog/2024/11/lfortran-supports-all-intrinsic-functions/</link>
      <pubDate>Thu, 14 Nov 2024 00:00:00 +0000</pubDate>
      <guid>https://lfortran.org/blog/2024/11/lfortran-supports-all-intrinsic-functions/</guid>
      <description>&lt;p&gt;We are thrilled to announce that LFortran supports all intrinsic functions&#xA;listed in &lt;a href=&#34;https://j3-fortran.org/doc/year/18/18-007r1.pdf&#34;&gt;F2018 Interpretation Document (Table 16.1 Pg: 332)&lt;/a&gt; (also shown by this nice &lt;a href=&#34;https://gcc.gnu.org/onlinedocs/gfortran/Intrinsic-Procedures.html&#34;&gt;list&lt;/a&gt; online at GFortran&amp;rsquo;s documentation).&#xA;This comprehensive list of almost 200 intrinsics encompasses a broad array of&#xA;functions and subroutines essential to Fortran&amp;rsquo;s functionality, including&#xA;elemental, inquiry, transformational, array operations, and more. For each&#xA;function we support both compile-time and runtime evaluation.&lt;/p&gt;&#xA;&lt;p&gt;The functions are implemented in an ASR (Abstract Semantic Representation)&#xA;pass, which means they get &amp;ldquo;instantiated&amp;rdquo; and specialized for the argument&#xA;types and then the compiler can optimize it, so using any intrinsic function is&#xA;at least as fast as implementing the same operation yourself, there is no&#xA;runtime overhead.&lt;/p&gt;</description>
    </item>
    <item>
      <title>LFortran now compiles SNAP</title>
      <link>https://lfortran.org/blog/2024/08/lfortran-now-compiles-snap/</link>
      <pubDate>Tue, 27 Aug 2024 00:00:00 +0000</pubDate>
      <guid>https://lfortran.org/blog/2024/08/lfortran-now-compiles-snap/</guid>
      <description>&lt;p&gt;We are thrilled to announce that &lt;a href=&#34;https://github.com/lfortran/lfortran&#34;&gt;LFortran&lt;/a&gt; can now successfully compile and run &lt;a href=&#34;https://github.com/lanl/SNAP&#34;&gt;lanl/SNAP&lt;/a&gt;, marking a significant milestone in our journey to beta. SNAP is the seventh production-grade, third-party code that LFortran can compile, bringing us closer to our goal of compiling 10 such codesâ€”a critical step toward a beta-quality compiler.&lt;/p&gt;&#xA;&lt;hr&gt;&#xA;&lt;h1 id=&#34;about-snap&#34;&gt;About SNAP&lt;/h1&gt;&#xA;&lt;p&gt;&lt;strong&gt;SNAP&lt;/strong&gt; (&lt;em&gt;SN&lt;/em&gt; Discrete Ordinates &lt;em&gt;Application Proxy&lt;/em&gt;) is a proxy application designed to emulate the performance of modern discrete ordinates neutral particle transport codes. It replicates the computational workload, memory requirements, and communication patterns of the Los Alamos National Laboratory code PARTISN, without including actual physics. By using domain decomposition and parallelization across spatial, angular, and energy domains, SNAP is ideal for performance testing on cutting-edge high-performance computing systems.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Fortran On Web Using LFortran</title>
      <link>https://lfortran.org/blog/2024/05/fortran-on-web-using-lfortran/</link>
      <pubDate>Thu, 02 May 2024 00:00:00 +0000</pubDate>
      <guid>https://lfortran.org/blog/2024/05/fortran-on-web-using-lfortran/</guid>
      <description>&lt;h1 id=&#34;fortran-on-web-using-lfortran&#34;&gt;Fortran On Web Using LFortran&lt;/h1&gt;&#xA;&lt;p&gt;Recently, there was a blog post titled &lt;a href=&#34;https://gws.phd/posts/fortran_wasm/&#34;&gt;Fortran on WebAssembly&lt;/a&gt; released by &lt;a href=&#34;https://gws.phd/&#34;&gt;Dr George W Stagg&lt;/a&gt;. This article inspired us to compile the same example using our &lt;a href=&#34;https://lfortran.org/&#34;&gt;LFortran&lt;/a&gt; compiler. We are happy to share that we have the fortran &lt;a href=&#34;https://en.wikipedia.org/wiki/MNIST_database&#34;&gt;mnist&lt;/a&gt; classifier example used in the blog post, compiled to WebAssembly using LFortran (with no hacks to the compiler) and working perfectly in the browser.&lt;/p&gt;&#xA;&lt;h2 id=&#34;mnist&#34;&gt;MNIST&lt;/h2&gt;&#xA;&lt;iframe src=&#34;https://lfortran.github.io/mnist-classifier-blas-wasm/&#34; style=&#34;width: 100%; height: 282px; border: none;&#34;&gt;&#xA;&lt;/iframe&gt;&#xA;&lt;p&gt;We cloned the original authors code and just swapped-in two of our generated files &lt;code&gt;mnist.js&lt;/code&gt; and &lt;code&gt;mnist.wasm&lt;/code&gt; with the original files. We also fixed few minor bugs in the code that we came across (details in the commit history).&lt;/p&gt;</description>
    </item>
    <item>
      <title>LFortran compiles Fortran stdlib</title>
      <link>https://lfortran.org/blog/2024/04/lfortran-compiles-fortran-stdlib/</link>
      <pubDate>Tue, 16 Apr 2024 00:00:00 +0000</pubDate>
      <guid>https://lfortran.org/blog/2024/04/lfortran-compiles-fortran-stdlib/</guid>
      <description>&lt;h1 id=&#34;lfortran-compiles-85-fortran-stdlib&#34;&gt;LFortran compiles 85% Fortran stdlib&lt;/h1&gt;&#xA;&lt;p&gt;We are happy to announce that LFortran can compile all numerical modules in &lt;code&gt;stdlib&lt;/code&gt;. The &lt;code&gt;stdlib&lt;/code&gt; library has 32 modules, here are the details of the current status:&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;all 32 modules compile to ASR&lt;/li&gt;&#xA;&lt;li&gt;27 modules (85%) compile to LLVM; there are 4 hash modules (&lt;code&gt;hash_32bit&lt;/code&gt;, &lt;code&gt;hash_64bit&lt;/code&gt;, &lt;code&gt;hashmaps&lt;/code&gt;, &lt;code&gt;hashmap_wrappers&lt;/code&gt;, &lt;code&gt;stringlist_type&lt;/code&gt;) and one &lt;code&gt;stringlist_type&lt;/code&gt; module that does not compile to LLVM yet&lt;/li&gt;&#xA;&lt;li&gt;24 modules pass all their tests; 3 modules (&lt;code&gt;sorting&lt;/code&gt;, &lt;code&gt;bitsets&lt;/code&gt;, &lt;code&gt;stats&lt;/code&gt;) do not pass all tests yet, but simple examples that use the modules work&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;This is sixth third-party production-grade code that LFortran can compile after &lt;a href=&#34;https://lfortran.org/blog/2024/01/lfortran-compiles-60-of-scipy/&#34;&gt;SciPy&lt;/a&gt;. The &lt;a href=&#34;https://lfortran.org&#34;&gt;progress bar towards beta&lt;/a&gt; has thus reached 6/10.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
