<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Fortran on LFortran</title>
    <link>https://lfortran.org/tags/fortran/</link>
    <description>Recent content in Fortran on LFortran</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 31 Oct 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://lfortran.org/tags/fortran/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>LFortran Compiles dftatom</title>
      <link>https://lfortran.org/blog/2023/10/lfortran-compiles-dftatom/</link>
      <pubDate>Tue, 31 Oct 2023 00:00:00 +0000</pubDate>
      
      <guid>https://lfortran.org/blog/2023/10/lfortran-compiles-dftatom/</guid>
      <description>LFortran Compiles dftatom After compiling fastGPT in September 2023, today we are happy to announce that LFortran can compile and run dftatom without any modifications, and dftatom&amp;rsquo;s continuous integration (CI) now tests every commit with LFortran, along side GFortran.
This is the fourth full third-party production-grade code that LFortran can compile. The progress bar towards beta has thus reached 4/10.
It can compile the main application in Debug mode twice faster than GFortran.</description>
    </item>
    
    <item>
      <title>LFortran Compiles fastGPT</title>
      <link>https://lfortran.org/blog/2023/09/lfortran-compiles-fastgpt/</link>
      <pubDate>Wed, 06 Sep 2023 00:00:00 +0000</pubDate>
      
      <guid>https://lfortran.org/blog/2023/09/lfortran-compiles-fastgpt/</guid>
      <description>In our last blog post from May 2023, we announced that LFortran can compile legacy and modern Minpack. Today, we are happy to announce that LFortran can compile and run fastGPT.
This is the third code that LFortran can compile. The progress bar toward beta has progressed to 3/10.
LFortran is still alpha, meaning that users expect frequent bugs and breaking changes. Alpha users are enthusiastic partners in the effort to reach beta and they dilligently report issues.</description>
    </item>
    
    <item>
      <title>LFortran Breakthrough: Now Building Legacy and Modern Minpack</title>
      <link>https://lfortran.org/blog/2023/05/lfortran-breakthrough-now-building-legacy-and-modern-minpack/</link>
      <pubDate>Tue, 02 May 2023 00:00:00 +0000</pubDate>
      
      <guid>https://lfortran.org/blog/2023/05/lfortran-breakthrough-now-building-legacy-and-modern-minpack/</guid>
      <description>Two days ago on April 30, 2023 was the 4th anniversary of LFortran&amp;rsquo;s initial release. Our initial prototype in 2019 was in Python. Since then we have rewritten to C++ for speed and robustness. In 2021 we announced an MVP.
In this update, we are happy to announce that LFortran can compile and run both legacy and modern Minpack. We&amp;rsquo;ll start off by taking a look at the current compilation status and benchmarks of minpack.</description>
    </item>
    
    <item>
      <title>Why to Use Fortran For New Projects</title>
      <link>https://lfortran.org/blog/2019/05/why-to-use-fortran-for-new-projects/</link>
      <pubDate>Tue, 07 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://lfortran.org/blog/2019/05/why-to-use-fortran-for-new-projects/</guid>
      <description>We received a lot of positive feedback on our LFortran announcement. Most generally like the idea and tool, and expressed interest to hear a bit more on why we think Fortran is a superior language in its domain and why it makes sense to use Fortran for new projects.
Why Fortran? Fortran was designed from the ground up to naturally and simply translate mathematics to code that compiles and runs at maximum speed.</description>
    </item>
    
    <item>
      <title>Why We Created LFortran</title>
      <link>https://lfortran.org/blog/2019/04/why-we-created-lfortran/</link>
      <pubDate>Tue, 30 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://lfortran.org/blog/2019/04/why-we-created-lfortran/</guid>
      <description>We recently open sourced LFortran, an interactive Fortran compiler built on top of LLVM that we have been developing for the last 1.5 years. It is a work in progress and at the link you can find what works already, what is planned and a roadmap.
Here is our motivation.
Why are almost no new scientific or engineering software projects started in Fortran? Usually (in our neck of the woods) C++ is chosen instead.</description>
    </item>
    
  </channel>
</rss>
